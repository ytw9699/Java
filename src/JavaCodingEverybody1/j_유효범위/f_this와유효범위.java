package j_유효범위;

class Calculator{
	
    int left, right;
   /* public void setOprands(int left, int right){
        this.left = left; //this는 c1의 인스턴스를 가리키는거,인스턴스 자신//결국 전역변수인건데
        this.right = right;
    }*/
    public void setOprands(int _left, int _right){
        left = _left; //여기서 left도 전역변수인거다!왜냐면 메소드안에 지역변수가 선언되지않았기때문에!
        right = _right;
        //이러한 범위에대한 눈을 키우자라는 의미에서 접근
    }
    
    //위 두가지 메소드 처럼 두가지로 만들수있는거다
    public void sum(){
        System.out.println(this.left+this.right);
    }
    
    public void avg(){
        System.out.println((this.left+this.right)/2);
    }
}

public class f_this와유효범위 {
	
    public static void main(String[] args) {
     
        Calculator c1 = new Calculator();
        c1.setOprands(10, 20);
        c1.sum();       
        c1.avg();       
        
        Calculator c2 = new Calculator();
        c2.setOprands(20, 40);
        c2.sum();       
        c2.avg();
    }
}


//객체지향이 프로그래밍이 나오게 된 배경중의 하나가 전역변수의 사용시 발생하는 문제 때문이기도 하다.
//즉 전역변수를 사용하는 메소드가 있다면 그 전역변수와 메소드를 묶어서 하나의 객체로 만든것
//그러면 객체안에서만 사용되는 전역변수로 변수의 유효범위를 제한할수있기 때문에 절자치향과 다르게 편안한 마음으로 사용할수 있기때문
//즉 절자치향에서는 전역변수를 금기시하지만 객체지향에서는 이렇게 유효범위를 줄인다면 금기시까지 하는것은 아니다.
//하지만 객체도 커질려면 커질수있기 때문에 객체안에서의 전역변수도 적당히 써야하지 많이쓰는것은 좋지 않다. 그래서 적당한 단위로 객체를 쪼개는것도 중요하다
//객체안의 전역변수와 메소드가 있다고 가정할때 메소드가 전역변수의값을 쓴다면 이 메소드는 이 객체에 종속된것이다.전역변수에 의존적인기 때문.
//그러면 이 메소드를 다시 분리해서 다른곳에서 쓰기 어려워지는것이다.
//메소드가 인자를 통해서 파라미터를 통해서 메소드 안으로 데이터를 끌어올수있는 구조라면 지역변수를 셋팅하는게 더바람직하다
//이 파라미터는 명백하게 표명된것이기 때문에 메소드를 사용하는 사람은 파라미터 값을 통해서 제어되는 녀석이라는것을 예상할수있는것이다.
//파라미터 없이 메소드안에서 전역변수를 쓴다면 이를 예상하기가 어렵다 확 들어나지않기때문

/*유효범위란 변수를 전역변수, 지역변수 나눠서 좀 더 관리하기 편리하도록 한 것이다.
객체라는 개념이 존재하지 않는 절차지향 프로그래밍에서는 
모든 메소드에서 접근이 가능한 전역 변수의 사용을 금기시하는 경향이 있다. 
전역적인 사용의 효용이 분명한 데이터에 한해서 제한적으로 
전역변수를 사용하도록 하고 있는 것이다.
객체지향 프로그래밍은 바로 이런 문제를 극복하기 위한 노력이라도고 볼 수 있다.
즉 연관된 변수와 메소드를 그룹핑 할 수 있도록 함으로서
좀 더 마음놓고 객체 안에서 전역변수를 사용할 수 있도록 한 것이다.
전역변수는 더 이상 죄악시할 대상이 아닌 것이 된다. 이렇듯 도구와 사람의 마음은 밀접한 연관이 있다.
부품의 관점에서도 생각해볼 수 있다.
어떤 메소드가 전역변수를 사용하고 있다는 것은 그 메소드는 그 전역변수에 의존한다는 의미다.
전역변수에 의존한다는 것은 이 메소드가 다른 완제품의 부품으로서 사용될 수 없다는 의미다.
객체지향 덕분에 좀 더 안심하고 전역변수를 사용하게 되었지만,
객체도 크기가 커지면 관리의 이슈가 생겨난다. 
객체지향 프로그래밍에서도 가급적이면 전역변수의 사용을 자제하는 것이 좋고,
동시에 단일 객체가 너무 비대해지지 않도록 적절하게 규모를 쪼개는 것도 중요하다.
결국 적절히하되 전역변수보다는 지역변수를 쓰자는것*/