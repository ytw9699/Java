package m_접근제어자;

public class a_정의 {
	/*
	 * 결국 api를 만드는 개발자와 그걸 쓰는 우리들을 생각해보자
	 public , private 이런걸 접근제어라그럼
	  접근제어자는 클래스의 맴버(변수와 메소드)들의 접근 권한을 지정한다
	  프로그래밍 도구의 기본적인 목표는 생각하는 것을 자유롭게 표현할 수 있도록 하는 것이다. 
	하지만 자유만으로는 부족하다. 
	프로그래밍은 작은 것에서 거대한 것, 단순한 것에서 복잡한 것,
	단독 작업에서 협업으로 나아가게 된다.
	이러한 변화를 수용하기 위해서는 다양한 규제가 필요해지게 된다.
 	우리 수업을 통해서 지금까지 경험한 대표적인 규제 중의 하나는 데이터 타입을 들 수 있겠다.
 	 어떤 변수가 있을 때 그 변수에 어떤 데이터 타입이 들어있는지, 
 	 또 어떤 메소드가 어떤 데이터 타입의 데이터를 리턴하는지를 명시함으로써 
 	 사용하는 입장에서는 안심하고 변수와 메소드를 사용할 수 있게 된다. 
 	 물론 도구 설계자의 취향이나, 도구의 목적에 따라서 이러한 규제는 채택 되기도 하고,
 	  배제 되기도 한다. 여기에 정답은 없다.
	  지금부터 배울 
	  ★추상 클래스,
	  ★final
	  ★ 접근 제어자 public , private
	  ★인터페이스
	  등은 바로 이 규제에 해당하는 것이다.
	
	사려 깊은 규제라면 그것이 목적해야 하는 바는 분명해야 한다.
	
	 자유에 질서를 부여함으로서 자유를 촉진하는 것이다. 
	 
	 이번 시간에는 규제 중의 하나인 접근 제어자에 대해서 알아보자.
	 
	 사용자가 접근하면 안되거나 접근 할 필요가 없는 맴버에 대한 접근을 규제할 수 있게 되었다. 
	 
	 어떤 맴버에 대한 접근을 허용할 것인가를 작업자의 판단에 달렸다.
*/
}