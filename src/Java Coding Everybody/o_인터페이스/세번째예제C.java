package o_인터페이스;
interface I3{
    public void x();
}
interface I4 extends I3{//상속받는다
    public void z();//인터페이스  멤버는 반드시 퍼블릭이어야한다
}
class 세번째예제C implements I4{
    public void z(){} //z메소드는 당연히 구현해야 하지만
    public void x(){} //상속받았기에 X메소드도 구현해야한다
}
/*인터페이스는 그 인터페이스를 구현한 클래스를 어떻게 조작할 것인가를 규정한다. 
그렇기 때문에 외부에서 제어 할 수 있는 가장 개방적인 접근 제어자인 public만을 허용한다.
public을 생략하면 접근 제어자 default가 되는 것이 아니라 public이 된다. 
왜냐하면 인터페이스의 맴버는 무조건 public이기 때문이다.*/

/*abstract vs interface
인터페이스와 추상 클래스는 서로 비슷한 듯 다른 기능이다.
인터페이스는 클래스가 아닌 인터페이스라는 고유한 형태를 가지고 
있는 반면 추상 클래스는 일반적인 클래스다. 
또 인터페이스는 구체적인 로직이나 상태를 가지고 있을 수 없고,
추상 클래스는 구체적인 로직이나 상태를 가지고 있을 수 있다.
공통점은 둘다 메소드에 public이 붙어야한다
인터페이스에는 public이 안붙으면 자동으로 붙여주고
추상클래스는 public이 안붙으면 오류남
*/